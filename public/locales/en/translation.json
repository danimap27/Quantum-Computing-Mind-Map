{
  "title": "Quantum Computing Mind Map",
  "root": "Quantum Computing",
  "root-details": "An interactive guide to the world of quantum computing, from fundamental principles to cutting-edge applications. Subtitle: Unlocking the Imagination of Nature.",
  "foundations": "Foundations of Quantum Computing",
  "foundations-details": "",
  "qubits": "Qubits",
  "qubits-details": "The basic unit of quantum information. Can exist in a superposition of two states, 0 and 1. Often visualized on a Bloch sphere.",
  "circuit-model": "Quantum Circuit Model",
  "circuit-model-details": "A model for quantum computation where horizontal lines (wires) represent qubits, and gates are applied. Read left to right.",
  "gates": "Quantum Gates",
  "gates-details": "Operations on qubits. Examples include Hadamard (H), Pauli-X, Y, Z, CNOT, and Toffoli. Universal gates can create any quantum operation.",
  "entanglement": "Entanglement",
  "entanglement-details": "A quantum mechanical phenomenon where qubits are linked in a way that their fates are intertwined, regardless of distance. Example: Bell state ‚àö1/2(|00‚ü© + |11‚ü©).",
  "measurement": "Measurements",
  "measurement-details": "The process of extracting classical information from a quantum state, which collapses the superposition. The probability of measuring state |ùúë‚ü© from |ùúì‚ü© is |‚ü®ùúë|ùúì‚ü©|¬≤.",
  "dirac-notation": "Dirac Notation",
  "dirac-notation-details": "A standard notation for quantum states. |ùúì‚ü© (ket) for state vectors, ‚ü®ùúë| (bra) for row vectors, and ‚ü®ùúë|ùúì‚ü© for inner products.",
  "algorithms": "Quantum Algorithms",
  "algorithms-details": "",
  "optimization": "Quantum Optimization",
  "optimization-details": "",
  "ising-qubo": "Ising Model & QUBO",
  "ising-qubo-details": "Methods for formulating complex optimization problems (like Max-Cut) into a format solvable by quantum computers.",
  "annealing": "Quantum Annealing",
  "annealing-details": "A metaheuristic for finding the global minimum of a given objective function. Used by D-Wave systems via their Ocean software.",
  "qaoa": "QAOA",
  "qaoa-details": "Quantum Approximate Optimization Algorithm. A hybrid quantum-classical method that discretizes quantum annealing.",
  "vqe": "VQE",
  "vqe-details": "Variational Quantum Eigensolver. Finds ground states of Hamiltonians, useful for molecular problems like H2. VQD is for excited states.",
  "gas": "Grover's Adaptive Search",
  "gas-details": "An optimization technique that uses Grover's search algorithm to find the minimum of a function.",
  "qml": "Quantum Machine Learning (QML)",
  "qml-details": "",
  "qml-def": "QML Definition",
  "qml-def-details": "A field that explores the intersection of quantum computing and classical machine learning.",
  "feature-maps": "Feature Maps",
  "feature-maps-details": "Techniques to encode classical data into quantum states (e.g., Angle Encoding, AmplitudeEmbedding, ZZFeatureMap).",
  "qsvm": "QSVM",
  "qsvm-details": "Quantum Support Vector Machines. Uses a quantum computer to estimate the kernel function, potentially offering speedups.",
  "qnn": "QNN",
  "qnn-details": "Quantum Neural Networks. Analogs of classical NNs using parameterized quantum circuits (variational forms) like TwoLocal or StronglyEntanglingLayers.",
  "hybrid-arch": "Hybrid Architectures",
  "hybrid-arch-details": "Combining quantum and classical components. Examples: PennyLane with TensorFlow, Qiskit with PyTorch.",
  "qgan": "QGAN",
  "qgan-details": "Quantum Generative Adversarial Networks. Quantum versions of GANs for unsupervised generation tasks.",
  "foundational-algos": "Foundational Algorithms",
  "foundational-algos-details": "",
  "deutsch-jozsa": "Deutsch-Jozsa",
  "deutsch-jozsa-details": "One of the first algorithms to demonstrate an exponential quantum speedup over classical algorithms for a specific problem.",
  "grover": "Grover's Algorithm",
  "grover-details": "Provides a quadratic speedup for unstructured search problems through amplitude amplification.",
  "qft": "Quantum Fourier Transform",
  "qft-details": "A key subroutine in many important quantum algorithms, including Shor's algorithm and phase estimation.",
  "qpe": "Quantum Phase Estimation",
  "qpe-details": "Uses the QFT to estimate the eigenvalues of a unitary operator, a crucial step for many other algorithms.",
  "hardware": "Quantum Hardware & Infrastructure",
  "hardware-details": "",
  "qubit-tech": "Qubit Technologies",
  "qubit-tech-details": "Different physical implementations of qubits, including Superconducting (Transmons), Spin Qubits, and Trapped Ions/Atoms.",
  "hw-arch": "Hardware Architecture",
  "hw-arch-details": "Includes control electronics, cryogenic wiring, and packaging for multi-chip processors and couplers (C, L, M couplers).",
  "challenges": "Challenges",
  "challenges-details": "Major hurdles include decoherence (noise), limited qubit connectivity, shallow circuit depth, and barren plateaus in training.",
  "error-correction": "Error Correction",
  "error-correction-details": "Techniques like Surface Codes and LDPC codes aim to create fault-tolerant quantum computers, a major goal for the industry.",
  "processors": "Key Processors",
  "processors-details": "Notable quantum processors include IBM's Eagle (127 qubits) and Heron (133 qubits), and systems from Quantinuum and Atom Computing.",
  "software": "Quantum Software & Tools",
  "software-details": "",
  "frameworks": "Programming Frameworks",
  "frameworks-details": "High-level libraries for building and running quantum circuits. Key players are Qiskit and PennyLane.",
  "qiskit": "Qiskit",
  "qiskit-details": "An open-source SDK from IBM for working with quantum computers. Includes Terra, Aer, Nature, and modules for ML and Optimization.",
  "pennylane": "PennyLane",
  "pennylane-details": "A library for differentiable quantum programming, connecting quantum circuits to ML frameworks like PyTorch and TensorFlow.",
  "other-tools": "Other Tools",
  "other-tools-details": "D-Wave's Ocean (for annealing), Amazon Braket, Microsoft QDK (Q#), Google Cirq, and the visual simulator Quirk.",
  "classical-libs": "Integrated Classical Libraries",
  "classical-libs-details": "Quantum frameworks integrate seamlessly with classical ML tools like TensorFlow, PyTorch, scikit-learn, NumPy, and Matplotlib.",
  "learning": "Learning & Practical Application",
  "learning-details": "",
  "book-philosophy": "Hands-On Approach",
  "book-philosophy-details": "Focuses on understanding through a combination of theory and practical code examples.",
  "sim-vs-real": "Simulators vs. Real Hardware",
  "sim-vs-real-details": "Most frameworks allow algorithms to be tested on local simulators before being sent to real quantum hardware in the cloud.",
  "open-source": "Open Source",
  "open-source-details": "The availability of free, open-source tools like Qiskit and PennyLane is crucial for the growth of the quantum community.",
  "future": "Key Concepts & Future Outlook",
  "future-details": "",
  "nisq": "NISQ Era",
  "nisq-details": "Noisy Intermediate-Scale Quantum. The current era, focused on finding applications for quantum computers with 50-100s of noisy qubits.",
  "vqa": "Variational Quantum Algorithms",
  "vqa-details": "A class of hybrid algorithms (like VQE, QAOA) that are central to the NISQ era due to their resilience to noise.",
  "complexity": "Computational Complexity",
  "complexity-details": "Quantum computers promise to solve certain problems (like factoring) that are intractable for classical computers, exploring classes beyond P and NP.",
  "future-qc": "The Future of QC",
  "future-qc-details": "Focus is on scaling up qubit counts, improving quality through error correction, and discovering new, practical applications.",
  "learn-more": "Learn More"
}